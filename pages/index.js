import Head from 'next/head'
import styles from './index.module.css'

import { styled } from '@mui/material/styles';

import AccessTimeIcon from '@mui/icons-material/AccessTime';
import LayersIcon from '@mui/icons-material/Layers';

import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Box from '@mui/material/Box';

import { useMemo, useState } from 'react'

import moment from 'moment/moment'
import localization from 'moment/locale/fr'

export default function Home({ steamId }) {

  moment().locale("fr", localization)

  const [currentTab, setCurrentTab] = useState(0);

  const handleTabChange = (event, newValue) => {
    console.log(newValue)
    setCurrentTab(newValue);
  };

  const [currentSteamId, setCurrentSteamId] = useState(steamId)
  const [rustInventory, setRustInventory] = useState();

  const handleChange = e => setCurrentSteamId(e.target.value)

  const handleSubmit = async e => {
    e.preventDefault();
    const response = await fetch("/api/items",
      {
        body: JSON.stringify({ steamId: currentSteamId }),
        headers: {
          'Content-Type': 'application/json'
        },
        method: "POST",
      }
    );

    const data = await response.json()
    console.log(data)

    setRustInventory(data)

  }



  const dataToShow = useMemo(() => currentTab === 0 ? rustInventory?.inventory : rustInventory?.stonking, [currentTab, rustInventory])
  console.log(dataToShow)

  const StyledTab = styled((props) => <Tab  {...props} />)(
    ({ theme }) => ({
      color: 'rgba(255, 255, 255, 0.7)',
      '&.Mui-selected': {
        color: '#fc8181',
      },
      '&.Mui-focusVisible': {
        backgroundColor: 'rgba(100, 95, 228, 0.32)',
      },
    }),
  );

  function TabPanel(props) {
    const { children, value, index, ...other } = props;

    return (
      <div
        role="tabpanel"
        hidden={value !== index}
        id={`simple-tabpanel-${index}`}
        aria-labelledby={`simple-tab-${index}`}
        {...other}
      >
        {value === index && (
          <Box >
            {children}
          </Box>
        )}
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

        {!rustInventory && <form>
          <h1>Check your Steam inventory</h1>
          <label htmlFor='steamId'>SteamID64</label>
          <input type="text" id="steamId" name="steamId" required value={currentSteamId || ""} onChange={handleChange} />
          <input type="submit" name="search" value="Search" onClick={handleSubmit} />
        </form>}

        <div className='container'>
          {rustInventory && (<>
            <div className={styles.account}>
              <div className={styles.profile}>
                <img src={rustInventory.profil.avatarUrl} />
                <div>
                  <p>{rustInventory.profil.name}</p>
                  <p>{rustInventory.profil.steamId}</p>
                  <p>Dernière synchro : {moment(rustInventory.profil.lastUpdatedInventoryOn).fromNow()}</p>
                </div>
              </div>
              <div>
                <p>Nombre total de skins : {rustInventory.stats.items}</p>
                <p>Valeur totale : {(rustInventory.stats.marketValue / 100).toFixed(2)}€</p>
                <p>Fluctuations : <span>{(rustInventory.stats.marketMovementValue / 100).toFixed(2)}€</span> au cours des {moment().diff(moment(rustInventory.stats.marketMovementTime), 'hours')} dernières heures</p>
              </div>
            </div>

            <Box sx={{ width: '100%' }}>
              <Box sx={{
                borderBottom: 1, borderColor: 'divider', marginBottom: "1rem", '& .MuiTabs-indicator': {
                  backgroundColor: '#fc8181',
                },
              }}>
                <Tabs value={currentTab} onChange={handleTabChange} aria-label="basic tabs example" >
                  <StyledTab label="Inventaire" />
                  <StyledTab label="ATH" />
                </Tabs>
              </Box>
              <TabPanel value={currentTab} index={0}>
                <div className={styles.inventory}>

                  {dataToShow?.map((item) => (
                    <a key={item.id} href={item.buyNowUrl}>
                      <div className={styles.item} style={{ backgroundImage: `linear-gradient(45deg, ${item.iconAccentColour}1A 5%, transparent 55%, transparent 75%, ${item.iconAccentColour}1A 100%)` }}>
                        <img src={item.iconUrl} />
                        <p className={styles.item__name} style={{ color: item.foregroundColour }} >{item.name}</p>

                        {/* <p>{item.itemType}</p> */}
                        <p className={styles.item__price}>{(item.buyNowPrice / 100).toFixed(2)}€</p>

                        <div style={{ display: "flex", justifyContent: "space-between", width: "100%", marginTop: "auto" }}>
                          <div
                            className={styles.item__qty}
                            style={{
                              display: "flex", alignItems: "center", gap: "0.25rem", filter: `drop-shadow(0 1px 0px ${item.iconAccentColour})`
                            }}
                          >
                            <LayersIcon />{item.tradableamount}</div>
                          {item.quantity - item.tradableamount > 0 &&
                            <div
                              className={styles.item__qty}
                              style={{
                                display: "flex", alignItems: "center", gap: "0.25rem", filter: `drop-shadow(0 1px 0px ${item.iconAccentColour})`
                              }}
                            >
                              <AccessTimeIcon fontSize="small" />{item.quantity - item.tradableamount} en attente
                            </div>}
                        </div>

                      </div>
                    </a>
                  ))}
                </div>
              </TabPanel>
              <TabPanel value={currentTab} index={1}>
                <div className={styles.inventory}>

                  {dataToShow?.map((item) => (
                    <a key={item.id} href={item.buyNowUrl}>
                      <div className={styles.item} style={{ backgroundImage: `linear-gradient(45deg, ${item.iconAccentColour}1A 5%, transparent 55%, transparent 75%, ${item.iconAccentColour}1A 100%)` }}>
                        <img src={item.iconUrl} />
                        <p className={styles.item__name} style={{ color: item.foregroundColour }} >{item.name}</p>

                        {/* <p>{item.itemType}</p> */}
                        <p className={styles.item__price}>{(item.buyNowPrice / 100).toFixed(2)}€</p>

                        <div style={{ display: "flex", justifyContent: "space-between", width: "100%", marginTop: "auto" }}>
                          <div
                            className={styles.item__qty}
                            style={{
                              display: "flex", alignItems: "center", gap: "0.25rem", filter: `drop-shadow(0 1px 0px ${item.iconAccentColour})`
                            }}
                          >
                            <LayersIcon />{item.tradableamount}</div>
                          {item.quantity - item.tradableamount > 0 &&
                            <div
                              className={styles.item__qty}
                              style={{
                                display: "flex", alignItems: "center", gap: "0.25rem", filter: `drop-shadow(0 1px 0px ${item.iconAccentColour})`
                              }}
                            >
                              <AccessTimeIcon fontSize="small" />{item.quantity - item.tradableamount} en attente
                            </div>}
                        </div>

                      </div>
                    </a>
                  ))}
                </div>
              </TabPanel>
            </Box>

          </>)}




        </div>

      </main>
    </>
  )
}

export async function getServerSideProps() {
  const steamId = process.env.STEAM_ID;
  return {
    props: { steamId: steamId }
  }
}