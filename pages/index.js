import Head from 'next/head'
import styles from './index.module.css'

import { styled } from '@mui/material/styles';

import RustItem from '@/components/RustItem';

import Tabs from '@mui/material/Tabs';
import Tab from '@mui/material/Tab';
import Box from '@mui/material/Box';

import AccountDetails from '@/components/AccountDetails';

import { useMemo, useState, useEffect } from 'react'

import { saveInventoryData, loadInventoryData } from '@/utils/manageData';



import Loader from '@/components/Loader';

export default function Home({ steamId }) {

  // console.log(steamId)




  const [currentTab, setCurrentTab] = useState(0);

  const [isFetching, setIsFetching] = useState(true);
  const [newDataFetched, setNewDataFetched] = useState(false);

  const handleTabChange = (event, newValue) => {
    setCurrentTab(newValue);
  };

  const [currentSteamId, setCurrentSteamId] = useState(steamId)
  const [rustInventory, setRustInventory] = useState();


  // TODO test react query
  const handleSubmit = async e => {
    e && e.preventDefault();
    setIsFetching(true)
    const response = await fetch("/api/items",
      {
        body: JSON.stringify({ steamId: currentSteamId }),
        headers: {
          'Content-Type': 'application/json'
        },
        method: "POST",
      }
    );

    console.log("FETCHING DATA")

    const data = await response.json()
    console.log(data)

    setRustInventory(data)
    setIsFetching(false)
    setNewDataFetched(true)
  }

  // On page load we get data from localstorage
  useEffect(() => {
    console.log("LOAD")
    const rustInventory = loadInventoryData()

    if (!rustInventory) {
      console.log("FETCH NEEDED")
      handleSubmit()
    } else {
      setRustInventory(rustInventory);
    }

  }, [])


  useEffect(() => {

    if (newDataFetched) {
      console.log("SAVE")
      saveInventoryData(rustInventory)
      setNewDataFetched(false)
    }

  }, [newDataFetched])

  const dataToShow = useMemo(() => currentTab === 0 ? rustInventory?.inventory : rustInventory?.stonking, [currentTab, rustInventory])

  const StyledTab = styled((props) => <Tab  {...props} />)(
    ({ theme }) => ({
      color: 'rgba(255, 255, 255, 0.7)',
      '&.Mui-selected': {
        color: '#fc8181',
      },
      '&.Mui-focusVisible': {
        backgroundColor: 'rgba(100, 95, 228, 0.32)',
      },
    }),
  );

  function TabPanel(props) {
    const { children, value, index, ...other } = props;

    return (
      <div
        role="tabpanel"
        hidden={value !== index}
        id={`simple-tabpanel-${index}`}
        aria-labelledby={`simple-tab-${index}`}
        {...other}
      >
        {value === index && (
          <Box >
            {children}
          </Box>
        )}
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>

        {isFetching && <Loader />}

        <div className='container'>
          {rustInventory && (<>

            <AccountDetails profil={rustInventory.profil} stats={rustInventory.stats} handleSubmit={handleSubmit} />

            <Box sx={{ width: '100%' }}>
              <Box sx={{
                borderBottom: 1, borderColor: 'divider', marginBottom: "1rem", '& .MuiTabs-indicator': {
                  backgroundColor: '#fc8181',
                },
              }}>
                <Tabs value={currentTab} onChange={handleTabChange} aria-label="basic tabs example" >
                  <StyledTab label="Inventaire" />
                  <StyledTab label="ATH" />
                </Tabs>
              </Box>

              <TabPanel value={currentTab} index={currentTab}>
                <div className={styles.inventory}>
                  {dataToShow?.map((item) => (<RustItem key={item.id} item={item} />))}
                </div>
              </TabPanel>

            </Box>

          </>)}




        </div>

      </main>
    </>
  )
}

export async function getServerSideProps() {
  const steamId = process.env.STEAM_ID;
  return {
    props: { steamId: steamId }
  }
}